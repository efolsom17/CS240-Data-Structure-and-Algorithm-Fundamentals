---
title: "CS240 Midterm"
author: "Eric Folsom"
format: html
---

```{python, setup_py}
#| echo: false
#| output: false

# Setup Chunk for python, loading the required libraries
import numpy as np
import pandas as pd
```

## Hanoi's Tower


The Tower of Hanoi problem involves three rods and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks stacked in ascending order of size on one rod, the smallest at the top, making a cone.

The goal of the puzzle is to move the entire stack to another rod, obeying the following rules:

1. Only one disk can be moved at a time
2. Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod.   
3. No disk may be placed on top of a smaller disk.

#### 1. Implement a solution for the Tower of Hanoi problem using recursion. Your solution should move the discs from the starting peg to the target peg using the auxiliary peg. 

Below is a diagram which shows a solution for the Tower of Hanoi problem when there are $3$ rods and $3$ discs:

![Tower of Hanoi with 3 discs and 3 rods](./misc/HanoisTower3.png){width=75%}

We first start with all three discs stacked on Rod $A$. Then procede with the following steps to end with all three disc stacked on rod $C$:

1. Move the <span style="color:green;">Green</span> disc from rod $A$ to rod $C$.
2. Move the <span style="color:red;">Red</span> disc from rod $A$ to rod $B$.
3. Move the <span style="color:green;">Green</span> disc from rod $C$ to rod $B$.
4. Move the <span style="color:blue;">Blue</span> disc from rod $A$ to rod $C$.
5. Move the <span style="color:green;">Green</span> disc from rod $B$ to rod $A$.
6. Move the <span style="color:red;">Red</span> disc from rod $B$ to rod $C$.
7. Move the <span style="color:green;">Green</span> disc from rod $A$ to rod $C$.

These steps will move the stack of three discs from rod $A$ to rod $C$ while following the established rules. We can break down the process a little more to understand what is going on and then build a recursive function from it. This solution to the Tower of Hanoi problem took $7 = 2^3 -1$ steps to solve.t   

Note that there are $n=3$ discs in this setup. 

Steps $1$ through $3$ involve us moving the <span style="color:green;">Green</span> and <span style="color:red;">Red</span> discs from rod $A$ to rod $B$ using the auxilary rod $C$ to store the <span style="color:green;">Green</span> disc while we move the larger of the two discs to the middle rod. These steps involve moving the <span style="color:green;">Green</span> disc to rod $C$ then moving it from $C$ to rod $B$ once the larger disc is in place.

In step $4$ we are simply moving the <span style="color:blue;">Blue</span> disc from rod $A$ to rod $C$.

Now in steps $5$ through $7$ we are simply doing what we did in steps $1$ through $3$, but instead of using rod $C$ as the auxillary rod, we are using rod $A$ as the auxillary rod to move the <span style="color:green;">Green</span> and <span style="color:red;">Red</span> discs from rod $B$ to rod $C$.


Thinking recursively, step $4$ would represent our base case. We are simply moving a disc from one rod to another rod. 

Next we need to think of the recursive step, which in this case is moving the $n-1=3-1=2$ remaining discs to another rod, using an auxilary rod. 

This same idea should hold for $n$ rods. We would basically be breaking the problem down into smaller versions of this three disc version of the problem.

* If we only had $n=1$ disc (i.e. only the <span style="color:blue;">Blue</span> disc), this would take $1$ step to solve, move the <span style="color:blue;">Blue</span> disc to rod $C$ from rod $A$. 

* If $n=2$ (i.e. only the <span style="color:red;">Red</span> and <span style="color:blue;">Blue</span> discs), the steps would be as follows
    1. Move the <span style="color:red;">Red</span> disc from rod $A$ to rod $B$.
    2. Move the <span style="color:blue;">Blue</span> disc from rod $A$ to rod $C$.
    3. Move the <span style="color:red;">Red</span> disc from rod $B$ to rod $C$

Note that the base case (Move the <span style="color:blue;">Blue</span> disc from rod $A$ to rod $C$) always shows up in each of these scenarios. 

Now that we have seen a few different scenarios, we can start to formulate an algorithm to solve this problem:

1. Move $n-1$ discs from rod $A$ to rod $B$. This uses rod $C$ as a "helper" rod.
2. Move the remaining disc from rod $A$ to rod $C$. 
3. Move the $n-1$ discs from rod $B$ to rod $C$. This uses rod $A$ as a "helper" rod.

Now lets try to implment this aproach to solving the problem using pseudocode:


```{plain, hanoi tower pseudocode}
def hanoistower(n, starting_rod = A, ending_rod = C, auxillary_rod = B)
    # base case only 1 disc to move
    if n == 1:
        move disc from starting rod to ending rod
    else:
        # recursively call the function to move the n-1 discs to the middle( auxilary) rod
        hanoistower(n-1, starting_rod = A, ending_rod = B, auxilary_rod = C)
        #some function to show the moving of the discs
        movedisc(start_rod, end_rod)
        # recursively call again to move the n-1 discs from the auxillary( middle) rod to the end rod
        hanoistower(n-1, starting_rod = B, ending_rod = C, auxilary_rod = A)
````

Basically each time we recursively call the funciton, we are changing which rods we are moving the discs to so that when we eventually reach the base case, we are able to move the disc to the correct rod.

Now we can implement this funciton in python:

```{python, hanoi tower python}

def tower_of_hanoi(n, starting_rod, ending_rod, middle_rod):
    pass
```




#### 2. Implement a solution for the Tower of Hanoi problem using an iterative approach.

#### 3. Compare the time and space complexity of both the recursive and iterative solutions and explain the differences.

#### 4. (Optional, but extra credit) Create a graphical user interface (GUI) that demonstrates the steps of the Tower of Hanoi problem as the discs are moved from the starting peg to the target peg. The GUI should allow the user to specify the number of discs and the speed at which the discs move.

#### 5. Create a variation of the Tower of Hanoi problem where the user can specify more than three pegs. Your solution should still move all the discs from the starting peg to the target peg while adhering to the rules of the Tower of Hanoi problem.

#### 6. (Optional, but extra credit) Create a variation of the Tower of Hanoi problem where the user can specify the number of discs and the number of pegs. Your solution should still move all the discs from the starting peg to the target peg while adhering to the rules of the Tower of Hanoi problem.



## Spell Checker

Create a spell checker console program that uses a hash table data structure to store a dictionary of words. Your program should be able to:

1. Load a dictionary of words from a file into the hash table.  You will need to create this yourself.  Aim for 20 to 100 words.  

2. Take a string of text as input and check each word in the text against the words in the dictionary stored in the hash table. Your program should identify any words that are not found in the dictionary and display them as "misspelled".

3. Implement a suggestion feature that suggests possible correct spellings for the misspelled words based on edit distance.

4. Implement a Levenshtein distance algorithm to compute the edit distance between two words.

5. Allow the user to add new words to the dictionary and update the hash table accordingly.

6. Handle collisions in the hash table using separate chaining.

7. Optimize the performance of your program in terms of time and space complexity.

8. Your program should be user-friendly and have a command-line interface.


## Code Library

My code library from this course can be found on my [GitHub](https://github.com/efolsom17/CS240-Data-Structure-and-Algorithm-Fundamentals/tree/main/cs240functions). It is a functioning python module that can be installed locally if the folder is downloaded (I am pretty sure at least). I am continually updating it to enhance some of the funcitons when I notice a problem I encounter when trying to use these algorithms and data structures in later points in the quarter. Will contain more content by the end of the course. 