---
title: "CS240 Midterm"
author: "Eric Folsom"
format: html
---

```{python, setup_py}
#| echo: false
#| output: false

# Setup Chunk for python, loading the required libraries
import numpy as np
import pandas as pd
```

## Hanoi's Tower


The Tower of Hanoi problem involves three rods and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks stacked in ascending order of size on one rod, the smallest at the top, making a cone.

The goal of the puzzle is to move the entire stack to another rod, obeying the following rules:
1. Only one disk can be moved at a time.
2. Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod.
3. No disk may be placed on top of a smaller disk.

#### 1. Implement a solution for the Tower of Hanoi problem using recursion. Your solution should move the discs from the starting peg to the target peg using the auxiliary peg. 

#### 2. Implement a solution for the Tower of Hanoi problem using an iterative approach.

#### 3. Compare the time and space complexity of both the recursive and iterative solutions and explain the differences.

#### 4. (Optional, but extra credit) Create a graphical user interface (GUI) that demonstrates the steps of the Tower of Hanoi problem as the discs are moved from the starting peg to the target peg. The GUI should allow the user to specify the number of discs and the speed at which the discs move.

#### 5. Create a variation of the Tower of Hanoi problem where the user can specify more than three pegs. Your solution should still move all the discs from the starting peg to the target peg while adhering to the rules of the Tower of Hanoi problem.

#### 6. (Optional, but extra credit) Create a variation of the Tower of Hanoi problem where the user can specify the number of discs and the number of pegs. Your solution should still move all the discs from the starting peg to the target peg while adhering to the rules of the Tower of Hanoi problem.



## Spell Checker

Create a spell checker console program that uses a hash table data structure to store a dictionary of words. Your program should be able to:

1. Load a dictionary of words from a file into the hash table.  You will need to create this yourself.  Aim for 20 to 100 words.  

2. Take a string of text as input and check each word in the text against the words in the dictionary stored in the hash table. Your program should identify any words that are not found in the dictionary and display them as "misspelled".

3. Implement a suggestion feature that suggests possible correct spellings for the misspelled words based on edit distance.

4. Implement a Levenshtein distance algorithm to compute the edit distance between two words.

5. Allow the user to add new words to the dictionary and update the hash table accordingly.

6. Handle collisions in the hash table using separate chaining.

7. Optimize the performance of your program in terms of time and space complexity.

8. Your program should be user-friendly and have a command-line interface.


## Code Library

My code library from this course can be found on my [GitHub](https://github.com/efolsom17/CS240-Data-Structure-and-Algorithm-Fundamentals/tree/main/cs240functions). It is a functioning python module that can be installed locally if the folder is downloaded (I am pretty sure at least). I am continually updating it to enhance some of the funcitons when I notice a problem I encounter when trying to use these algorithms and data structures in later points in the quarter. Will contain more content by the end of the course. 