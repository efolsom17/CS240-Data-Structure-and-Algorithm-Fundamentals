---
title: "Algorithms Assignment 2"
author: "Eric Folsom"
format: html
---

```{python, setup_py}
#| echo: false
#| output: false

# Setup Chunk for python, loading the required libraries
import numpy as np
import pandas as pd
```


```{r, setup_r}
#| echo: false
#| output: false

#Setup Chunk for R and Reticulate so that I can use ggplot if I ever have to graph stuff.
#This will most likely be useful for a later assignment.

library(reticulate)
library(tidyverse)
library(ggplot2)
```

## Problem 1: Write in pseudo code a selection sort algorithm the works over an array. Comment to explain the algorithm.

We start with an array of values $X = \{x_0,x_1, x_2, \ldots, x_n\}$. We assume that the elements of $X$, $x_i$, where $i=0,1,2,\ldots,n$, are not in any particular order. 

We repeat the following process $n-1$ times where $n$ is the length of the array. This is because once there is only one element left, we can assume that it is the largest element of the array.

1. Assign the first unsorted element as the minimum value of the array.
2. For every other unsorted element in the array:
   1. Compare the value of the element with the value we assigned as the minimum
        * If the value of the element is less than the minimum value we assigned:
          * Set this value as the new minimum value
3. Swap the positions of the minimum value with the first unsorted element. 

By following this algorithm, we will eventually end up with a sorted array (ascending). We can re-assign the minimum value as the maximum value if we wanted to sort the array in decending order.

## Problem 2: Write in the programming language of your choice a selection sort algorithm that works over an array. Comment to explain the algorithm.

We can implement the Selection Sort algorithm via the following Python code, comments are abreviated to save space, full comments are available via the attached Python script:

```{python, selection sort}
def SelectionSort(array, asc = True, desc = False):
    # array: array of values to be sorted, assumes each element is an int
    # asc: sort in ascending order, Default: True
    # desc: sort in descending order, Default: True

    array = array[:] # so that we don't manipulate the original array.
    
    if desc == True: #descending order
        for i in range(len(array)-1):#repeat $n-1$ times where $n$ is the length of the array.
            max_index = i#Assign the first unsorted element as the maximum value of the array.
            for j in range(i+1,len(array)): #For every other unsorted element in the array:
                    #Compare the value of the element with the value we assigned as the maximum
                    #If the value of the element is greater than the maximum value we assigned
                    if array[j] > array[max_index]:
                        #Set this element as the new maximum elemet
                        max_index = j 
            #Swap the positions of the maximum value with the first unsorted element.
            (array[i], array[max_index]) = (array[max_index], array[i])
    else: #ascending order
        for i in range(len(array)-1):#repeat $n-1$ times where $n$ is the length of the array.
            min_index = i#Assign the first unsorted element as the minimum value of the array.
            for j in range(i+1,len(array)): #For every other unsorted element in the array:
                    #Compare the value of the element with the value we assigned as the minimum
                    #If the value of the element is less than the minimum value we assigned
                    if array[j] < array[min_index]:
                        #Set this element as the new minimum element
                        min_index = j
            #Swap the positions of the minimum value with the first unsorted element.
            (array[i], array[min_index]) = (array[min_index], array[i])
    return array # return the new sorted array
```

## Problem 3: Write in pseudo code an insertion sort algorithm the works over an array. Comment to explain the algorithm.

We start with an array of values $X = \{x_0,x_1, x_2, \ldots, x_n\}$. We assume that the elements of $X$, $x_i$, where $i=0,1,2,\ldots,n$, are not in any particular order.

1. Assume that the fist element, $x_0$ is sorted into it's proper position.
2. For each unsorted element in $X$:
   1. Store the value of $x_i$.
      1. For each of the indices from the last sorted index down to $0$ ($x_j$ through $x_0$):
        * If the $x_j$ is greater than $x_i$:
          * Move $x_j$ to the right by one, $x_j = x_{j+1}$.
      * Insert $x_i$ into the array at the index $j$


If we are to check if $x_j$ is less than $x_i$ then we can instead sort the list in descending order rather than ascending.

## Problem 4: Write in the programming language of your choice an insertion sort algorithm that works over an array. Comment to explain the algorithm.

We can implement the Insertion Sort algorithm via the following Python Code:

```{python, insertion sort}
def InsertionSort(array, asc = True, desc = False):
    # array: array of values to be sorted, assumes each element is an int
    # asc: sort in ascending order, Default: True
    # desc: sort in descending order, Default: False
    
    array = array[:] # so that we don't manipulate the original array, will just print the sorted array
    
    if desc == True: # decsending
        for i in range(1,len(array)): # starting at index 1 because we assume index 0 is already sorted
            
            x_i = array[i] # The value we are comparing against
            j = i-1 # the highest index in the array that is sorted, starts at 0
            
            # Search sorted indices until we reach the correct position of x_i
            while j >= 0 and array[j] < x_i: 
                array[j + 1] = array[j]  # Shift elements to the right
                j -= 1 # Go to the next sorted element
            array[j+1] = x_i # insert the stored value $x_i$
    
    else: # ascending
        for i in range(1,len(array)): # starting at index 1 because we assume index 0 is already sorted
            
            x_i = array[i] # The value we are comparing against
            j = i-1 # the highest index in the array that is sorted, starts at 0
            
            # Search sorted indices until we reach the correct position of x_i
            while j >= 0 and array[j] > x_i: 
                array[j + 1] = array[j]  # Shift elements to the right
                j -= 1 # Go the the next sorted element
            array[j+1] = x_i # insert the stored value $x_i$
            
    return array # return the sorted array.
```

## Problem 5: How do the best, average and worst case time complexities compare between these two algorithms? Why is the best case different between insertion and selection?

The following table represents the time complexities of both Selection and Insertion Sort.

|| Selection Sort | Insertion Sort|
|:-:|:--------------:|:-------------:|
|Best Case|$O(n^2)$|$O(n)$|
|Average Case|$O(n^2)$|$O(n^2)$|
|Worst Case|$O(n^2)$|$O(n^2)$|

With selection sort, we have to sort an array of $n$ values, 

| Loop | Indices to Compare|
|:--:|:--:|
|1|$n-1$|
|2|$n-2$|
|3|$n-3$|
|4|$n-4$|
|$\vdots$|$\vdots$|
|$n$|1|

This can be written out mathematically as $(n-1)+(n-2)+(n-3)+\ldots+1$, which can be simplified to $\frac{n(n-1)}{2}$, which in big Oh notation is equivalent to $O(n^2)$. No matter what order the array is when it is inputed, even if it is sorted already,  Selection sort will always need to compare values in this manner. Both of the loops will have to be executed.

Compared to selection Sort, the best case time complexity for insertion sort is $O(n)$. This would be the scenario were the array was already sorted in the order that we wished. In that case the inner while loop would not run and we would only visit the $n$ indices of the array. 

## Problem 6: Use the attached file `numbers-1.txt` and sort the values using your two sort algorithms. What value is in position 7586?

To begin we must first load in the `numbers-1.txt` data.

```{python, data loading:}
with open("./Data/numbers-1.txt", "r") as nums: #opens the file
    numbers1 = [int(line.strip()) for line in nums]
```

We perform our sorting algorithms via the following code:

```{python, sorting asc}
numbers1_select = SelectionSort(numbers1)
numbers1_insert = InsertionSort(numbers1)
```

The value at position 7586 is as follows:

```{python, sorting2 asc}
#| echo: false

print(f"When the array is not sorted the value at position 7586\nis {numbers1[7586]}.\nUsing selection sort: {numbers1_select[7586]}\nUsing Insertion Sort: {numbers1_insert[7586]}")
```


If we were to sort in descending order we would get the following:

```{python, sorting desc}
#| echo: false

numbers1_select_desc = SelectionSort(numbers1, desc =True)
numbers1_insert_desc = InsertionSort(numbers1, desc = True)

print(f"When the array is not sorted the value at position 7586\nis {numbers1[7586]}.\nUsing selection sort: {numbers1_select_desc[7586]}\nUsing Insertion Sort: {numbers1_insert_desc[7586]}")
```

## Resources Used

Some of the resources I used to complete this assignment:

* w3schools DSA Python:
  * https://www.w3schools.com/dsa/dsa_algo_selectionsort.php
  * https://www.w3schools.com/dsa/dsa_algo_insertionsort.php
* Programiz
  * https://www.programiz.com/dsa/selection-sort
  * https://www.programiz.com/dsa/insertion-sort
* ChatGPT for various debugging and questions on how some pieces of code I have seen function.