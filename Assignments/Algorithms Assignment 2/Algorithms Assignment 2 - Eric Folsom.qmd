---
title: "Algorithms Assignment 2"
author: "Eric Folsom"
format: html
---

```{python, setup_py}
#| echo: false
#| output: false

# Setup Chunk for python, loading the required libraries
import numpy as np
import pandas as pd
```


```{r, setup_r}
#| echo: false
#| output: false

#Setup Chunk for R and Reticulate so that I can use ggplot if I ever have to graph stuff.
#This will most likely be useful for a later assignment.

library(reticulate)
library(tidyverse)
library(ggplot2)
```

## Problem 1: Write in pseudo code a selection sort algorithm the works over an array. Comment to explain the algorithm.

We start with an array of values $X = \{x_0,x_1, x_2, \ldots, x_n\}$. We assume that the elements of $X$, $x_i$, where $i=0,1,2,\ldots,n$, are not in any particular order. 

We repeat the following process $n-1$ times where $n$ is the length of the array. This is because once there is only one element left, we can assume that it is the largest element of the array.

1. Assign the first unsorted element as the minimum value of the array.
2. For every other unsorted element in the array:
   1. Compare the value of the element with the value we assigned as the minimum
        * If the value of the element is less than the minimum value we assigned:
          * Set this value as the new minimum value
3. Swap the positions of the minimum value with the first unsorted element. 

By following this algorithm, we will eventually end up with a sorted array (ascending). We can re-assign the minimum value as the maximum value if we wanted to sort the array in decending order.

## Problem 2: Write in the programming language of your choice a selection sort algorithm that works over an array. Comment to explain the algorithm.

We can implement the Selection Sort algorithm via the following Python code, comments are abreviated to save space, full comments are available via the attached Python script:

```{python, selection sort}
def SelectionSort(array, asc = True, desc = False):
    # array: array of values to be sorted, assumes each element is an int
    # asc: sort in ascending order, Default: True
    # desc: sort in descending order, Default: True

    array = array[:] # so that we don't manipulate the original array.
    
    if desc == True: #descending order
        for i in range(len(array)-1):#repeat $n-1$ times where $n$ is the length of the array.
            max_index = i#Assign the first unsorted element as the maximum value of the array.
            for j in range(i+1,len(array)): #For every other unsorted element in the array:
                    #Compare the value of the element with the value we assigned as the maximum
                    #If the value of the element is greater than the maximum value we assigned
                    if array[j] > array[max_index]:
                        #Set this element as the new maximum elemet
                        max_index = j 
            #Swap the positions of the maximum value with the first unsorted element.
            (array[i], array[max_index]) = (array[max_index], array[i])
    else: #ascending order
        for i in range(len(array)-1):#repeat $n-1$ times where $n$ is the length of the array.
            min_index = i#Assign the first unsorted element as the minimum value of the array.
            for j in range(i+1,len(array)): #For every other unsorted element in the array:
                    #Compare the value of the element with the value we assigned as the minimum
                    #If the value of the element is less than the minimum value we assigned
                    if array[j] < array[min_index]:
                        #Set this element as the new minimum element
                        min_index = j
            #Swap the positions of the minimum value with the first unsorted element.
            (array[i], array[min_index]) = (array[min_index], array[i])
    return array # return the new sorted array
```

## Problem 3: Write in pseudo code an insertion sort algorithm the works over an array. Comment to explain the algorithm.

We start with an array of values $X = \{x_0,x_1, x_2, \ldots, x_n\}$. We assume that the elements of $X$, $x_i$, where $i=0,1,2,\ldots,n$, are not in any particular order.

1. Assume that the fist element, $x_0$ is sorted into it's proper position.
2. For each unsorted element in $X$:
   1. Store the value of $x_i$.
      1. For each of the indices from the last sorted index down to $0$ ($x_j$ through $x_0$):
        * If the $x_j$ is greater than $x_i$:
          * Move $x_j$ to the right by one, $x_j = x_{j+1}$.
        * Insert $x_i$ into the array at the index $j$

## Problem 4: Write in the programming language of your choice an insertion sort algorithm that works over an array. Comment to explain the algorithm.

## Problem 5: How do the best, average and worst case time complexities compare between these two algorithms? Why is the best case different between insertion and selection?

## Problem 6: Use the attached file `numbers-1.txt` and sort the values using your two sort algorithms. What value is in position 7586?