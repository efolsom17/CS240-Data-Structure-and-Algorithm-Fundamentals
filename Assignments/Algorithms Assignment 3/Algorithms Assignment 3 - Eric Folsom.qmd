---
title: "Algorithms Assignment 3"
author: "Eric Folsom"
format: html
---

```{python, setup_py}
#| echo: false
#| output: false

# Setup Chunk for python, loading the required libraries
import numpy as np
import pandas as pd
```


```{r, setup_r}
#| echo: false
#| output: false

#Setup Chunk for R and Reticulate so that I can use ggplot if I ever have to graph stuff.
#This will most likely be useful for a later assignment.

library(reticulate)
library(tidyverse)
library(ggplot2)
```


## Problem 1: Write a linear search algorithm both recursively and iteratively in pseudo code. Comment to explain.

#### Iteratively:

For an iterative linear search, the pseudocode is as follows:

We start with an array, $X = \{x_0, x_1, x_2, \ldots, x_n\}$. Where $x_i, i = 0,1,2,\ldots,n$ are the elements of the array.

Suppose we are searching for the element in $X$, $x_j$. We would impelement something similar to the following:

1. For $x_i \in X$
       * Compare the value of $x_i$ with the value $x_j$.
         * If $x_j$ = x_0:
          * Return the index that $x_j$ is in
         * Else:
           * Go to the next index



#### Recursively:

## Problem 2: Write the same linear search algorithms in the programming language of your choice. Comment to explain.

I will be implementing these linear serach algorithms in both R and python. 

The linear search algorithm in R is as follows:

First we will do it iteratively:

```{r, linear search iterative}
LinSearchIt <- function(data, value){ # data is assumed to be a vector
  
  n<- length(data)
  for(i in 1:n) { # loops through the indices of our vector until we find the value we are looking for 
    if(value == data[i]){ # if the value we are looking for is the value in the index we are searching
      return(paste0( value, " is located at index ", i)) # return the value and its index
    } # go to the next index.
  }
}
```

Next we will do it recursively:

```{r, linear serach recursive}
LinSearchRec <- function(data, value){ #Data is assumed to be a vector
  
  checkequal <- function(index){ # function to check if values in an array are equal to some value
    if(index > length(data)) # if we are outside of the valid indices of our vector. 
      break() # stop
    if(data[index] == value){ # if we find the value we are looking for
      return(paste0( value, " is located at index ", index)) # tell us where it is
    }
    else{ # if we didn't find it
      checkequal(index+1) # check the next index
    }
  }
  checkequal(1) # starts us searching the vector, starts at index 1 because this is R.
}
```

Next we will implement these algorithms in python.

We begin with the iterative implementation:

```{python, linear search iterative}
def LinSearchIt(data, value): # iterative linear serach, takes in data as a list of integers
    searches = 0# to tell us if we are out of the array
    for i in range(len(data)-1): # for every index in the array
        if value == data[i]: # compare the value of x_i with x_j
            searches += 1
            return print(f"{value} is located at index {i} \nThis took {searches} searches.") # tell us if we find the value or not,
        # go to the next index and compare
        else:
           searches+= 1
    if searches >= len(data):
        return print(f"Item Not Found \nThis took {searches} searches.")
 ```

Next we do it recursively:

```{python, linear serach recursive}

```

## Problem 3: Rewrite the binary search algorithm from week 1 in a recursive form in pseudo code and in the programming language of your choice. Comment to explain.

## Problem 4: Find a for loop you wrote in previous course work and rewrite it as a recursive function (it can not be a simple linear search problem). Please show the original code in your submission.

Dig through some R files on your computer at home. Then make sure it works within this script, then change it to be recursive, make it simple as some of the R stuff will run for a long ass time. Maybe do the kmeans choice algorithm for your 447 project?

```{r, original iterative function}
x<-rnorm(1000)
df<- data.frame(x)
ggplot(df, aes(x=x))+geom_density()


```


```{r, recursive version}

```

## Problem 5: 

