---
title: "Algorithms Assignment 4"
author: "Eric Folsom"
format: html
---

```{python, setup_py}
#| echo: false
#| output: false

# Setup Chunk for python, loading the required libraries
import numpy as np
import pandas as pd
```


```{r, setup_r}
#| echo: false
#| output: false

#Setup Chunk for R and Reticulate so that I can use ggplot if I ever have to graph stuff.
#This will most likely be useful for a later assignment.

library(reticulate)
library(tidyverse)
library(ggplot2)
```

## Problem 1: Write in pseudo code a merge sort algorithm the works over an array. Comment to explain the algorithm.

Our pseudocode for a merge sort algorithm is as follows:

```{}
def mergesort(array):
    make a copy of the array
    base case: array has one element and is considered sorted
    Ensure that the array has more than 1 element, if it does it needs to be sorted
        Split the array in half (get the middle index)
        left half: All indices left of the middle index
        right half: all indices right of the middle index

        Recursive Calls:
        mergesort(left half)
        mergesort(right half)

        Merge left and right halves together in sorted order:
        start at the first index of each half, i and j for the left and right halves respectively
        also start at the first index of the merged array,to keep track of the
        while we are in  the indices of the two halfs we want to merge
            if left[i] < right[j]:
                put the left value into the corresponding index of the merged array
                go to the next index in the left half
            else:
                put the right value into the current index we are trying to put the value into in the merged array
                go to the next index in the left half
            go to the next index in the merged array
        put any remaining values at the end of the merged array

        return the new merged at sorted array
```

With this algorithm, we are splitting the array in half until we are left with arrays with size $1$. Our base case is that if we have an array of size $1$, we can assume that it is sorted. We recursively split our arrays if they have more than one element. Once we have reached our base case, we take the two halves of the array that we split and merge them together into a sorted array, we then continue this process with all the sub-arrays that we made when we split the algorithm in half to fully merge all the sub-arrays together.

Some of my thoughts about this algorithm are included in the python file.

## Problem 2: Write in the programming language of your choice a merge sort algorithm that works over an array. Comment to explain the algorithm.

```{python, mergesort}


```

## Problem 3: Write in pseudo code a quick sort algorithm the works over an array. Comment to explain the algorithm.

```{}


```
## Problem 4: Write in the programming language of your choice a quick sort algorithm that works over an array. Comment to explain the algorithm.

```{python, quicksort}
from random import sample as sample


```

## Problem 5: How do the best, average and worst case time complexities compare between these two algorithms?

## Problem 6: Use the uploaded file to verify your sort algorithms are working. `'numbers-4.txt'` What is the position of 90262? What is the position of 11559? 

```{python, verification}
from c240functions import binary_search as binarysearch()
```